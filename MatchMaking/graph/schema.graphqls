# Opaque types used by the games
scalar GameState
# Something that changes the state of the game
scalar GameEvent
# Used to verify authenticity of the player
scalar PlayerToken
# Used to identify player (while/black in chess etc.)
scalar PlayerIdentifier

type TimeControl {
  last_event_time: String!
  time_limit: Int
  time_left: Int!
}

# Infomation about the game
type GameInfo {
  id: ID!
  # Players in the game
  players_joined: [PlayerIdentifier!]!
  game_name: String!
  # Amount of events
  event_clock: Int!
  # Opaque game state
  state: GameState!
  is_ready: Boolean!
  is_finished: Boolean!
  winner: PlayerIdentifier!
  time_control: TimeControl!
}

type Query {
  gameInfo(id: ID!): GameInfo
  findOptimalMove(id: ID!): GameEvent!
  # limit - use 0 for no limit
  getPublicGames(limit: Int!): [GameInfo!]!
}

input GameCreateRequest {
  game_name: String!
  start_state: GameState!
  is_public: Boolean!
  time_limit: Int
}

type Mutation {
  createGame(data: GameCreateRequest): ID
  # Tries to join game id as player pid
  joinGame(id: ID!, pid: PlayerIdentifier!): PlayerToken!
  # Adds event to the game
  addEvent(id: ID!, token: PlayerToken!, event: GameEvent!): Boolean
  # Enforces timeout
  advance(id: ID!): Boolean!
}

type Subscription {
  subcribeGame(id: ID!): GameInfo
}